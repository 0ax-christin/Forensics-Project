{
  // Configure the daemon below:
  "options": {
    // Select the osquery config plugin.
    "config_plugin": "filesystem",
    // Select the osquery logging plugin.
    "logger_plugin": "filesystem",
    // The log directory stores info, warning, and errors.
    // If the daemon uses the 'filesystem' logging retriever then the log_dir
    // will also contain the query results.
    //"logger_path": "/var/log/osquery",
    // Set 'disable_logging' to true to prevent writing any info, warning, error
    // logs. If a logging plugin is selected it will still write query results.
    //"disable_logging": "false",
    // Query differential results are logged as change-events to assist log
    // aggregation operations like searching and transactions.
    // Set 'log_result_events' to log differentials as transactions.
    //"log_result_events": "true",
    // Splay the scheduled interval for queries.
    // This is very helpful to prevent system performance impact when scheduling
    // large numbers of queries that run a smaller or similar intervals.
    //"schedule_splay_percent": "10",
    // Write the pid of the osqueryd process to a pidfile/mutex.
    //"pidfile": "/var/osquery/osquery.pidfile",
    // Clear events from the osquery backing store after a number of seconds.
    "events_expiry": "3600",
    // A filesystem path for disk-based backing storage used for events and
    // query results differentials. See also 'use_in_memory_database'.
    //"database_path": "/var/osquery/osquery.db",
    // Comma-delimited list of table names to be disabled.
    // This allows osquery to be launched without certain tables.
    //"disable_tables": "foo_bar,time",
    // Enable debug or verbose debug output when logging.
    "verbose": "false",
    // The number of threads for concurrent query schedule execution.
    "worker_threads": "2",
    // Enable schedule profiling, this will fill in averages and totals for
    // system/user CPU time and memory for every query in the schedule.
    // Add a query: "select * from osquery_schedule" to record the performances.
    "enable_monitor": "true",
    //Required for process and hardware monitoring
    "disable_events": "false",
    "disable_audit": "false"
  },
  // Define a schedule of queries:
  "schedule": {
    // This is a simple example query that outputs basic system information.
    "check_autorun_local": {
      "query": "SELECT * FROM registry WHERE path='HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'",
      "interval": 3600
    },
    "check_autorun_local_run": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'",
      "interval": 3600
    },
    "check_autorun_local_runonce": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce'",
      "interval": 3600
    },
    "check_autorun_local_r": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\R'",
      "interval": 3600
    },
    "check_autorun_local_runEx": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunEx'",
      "interval": 3600
    },
    "check_autorun_local_runOnceEx": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx'",
      "interval": 3600
    },
    "check_startup_items": {
      "query": "SELECT * FROM startup_items'",
      "interval": 3600
    },
    "check_user_assist": {
      "query": "SELECT * FROM userassist",
      "interval": 120
    },
    "check_prefetch": {
      "query": "SELECT * FROM prefetch",
      "interval": 60
    },
    "check_autoexec_services": {
      "query": "SELECT * FROM autoexec WHERE source LIKE 'services' AND PATH NOT LIKE ''",
      "interval": 60
    },
    "check_mshta": {
      "query": "SELECT * FROM processes WHERE name LIKE '%mshta%'",
      "interval": 60
    }
  },
  // Decorators are normal queries that append data to every query.
  "decorators": {
    "load": [
      "SELECT uuid AS host_uuid FROM system_info;",
      "SELECT user AS username FROM logged_in_users ORDER BY time DESC LIMIT 1;"
    ]
  },
}